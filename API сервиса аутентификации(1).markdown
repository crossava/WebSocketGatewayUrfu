## API сервиса аутентификации ##

API предоставляет функциональность для аутентификации пользователей, регистрации, обновления токенов и взаимодействия через WebSocket. Сервис интегрируется с Kafka для асинхронной обработки запросов и поддерживает CORS для кросс-доменных запросов. Ниже описаны все эндпоинты с их параметрами, входными данными, ответами и особенностями.

### POST /login ###

**Описание**: Аутентифицирует пользователя по email и паролю. При успешной аутентификации устанавливает куки `access_token`, `refresh_token` и `user_id`.

**Параметры запроса**:
- **Тело запроса** (JSON, `application/json`):
  - `email` (строка, обязательное): Email пользователя.
  - `password` (строка, обязательное): Пароль пользователя.

**Пример запроса**:
```json
{
  "email": "user@example.com",
  "password": "securepassword"
}
```

**Ответ**:
- **Успех** (статус 200):
  - Тело: JSON-объект с данными ответа от Kafka (например, информация о пользователе).
  - Куки:
    - `access_token`: Токен доступа (httponly, samesite=None, secure=False).
    - `refresh_token`: Токен обновления (httponly, samesite=None, secure=False).
    - `user_id`: Идентификатор пользователя (httponly, samesite=None, secure=False).
- **Ошибки**:
  - 500: "Ошибка в ответе Kafka" (пустой ответ от Kafka).
  - 500: "Токены отсутствуют в ответе" (отсутствуют токены в ответе Kafka).
  - 500: "Ошибка авторизации" (общая ошибка обработки).
  - 504: "Время ожидания ответа истекло" (таймаут ответа от Kafka).

**Особенности**:
- Запрос отправляется в Kafka в топик `user_requests` с действием `login`.
- Время ожидания ответа от Kafka: 10 секунд.
- Куки устанавливаются для последующего использования в запросах.

### POST /refresh-token ###

**Описание**: Обновляет `access_token` и `refresh_token` на основе `refresh_token`, переданного в куки. Устанавливает новые куки с обновленными токенами.

**Параметры запроса**:
- **Куки**:
  - `refresh_token` (строка, обязательное): Токен обновления.
  - `user_id` (строка, обязательное): Идентификатор пользователя.

**Пример запроса**:
- HTTP-запрос с куки: `refresh_token=abc123; user_id=12345`.

**Ответ**:
- **Успех** (статус 200):
  - Тело: JSON-объект с данными ответа от Kafka.
  - Куки:
    - `access_token`: Новый токен доступа (httponly, samesite=None, secure=False).
    - `refresh_token`: Новый токен обновления (httponly, samesite=None, secure=False).
    - `user_id`: Идентификатор пользователя (httponly, samesite=None, secure=False).
- **Ошибки**:
  - 401: "Refresh token отсутствует" (отсутствует `refresh_token` в куки).
  - 500: "Токены отсутствуют в ответе" (отсутствуют токены в ответе Kafka).
  - 500: "Ошибка обновления токена" (общая ошибка обработки).
  - 504: "Время ожидания ответа истекло" (таймаут ответа от Kafka).

**Особенности**:
- Запрос отправляется в Kafka в топик `auth_requests` с действием `refresh_token`.
- Время ожидания ответа от Kafka: 10 секунд.
- Требуется наличие валидного `refresh_token` в куки.

### POST /register ###

**Описание**: Регистрирует нового пользователя, отправляя данные в Kafka для обработки.

**Параметры запроса**:
- **Тело запроса** (JSON, `application/json`):
  - `email` (строка, обязательное): Email пользователя.
  - `full_name` (строка, обязательное): Полное имя пользователя.
  - `password` (строка, обязательное): Пароль пользователя.
  - `role` (строка, обязательное): Роль пользователя.

**Пример запроса**:
```json
{
  "email": "newuser@example.com",
  "full_name": "Иван Иванов",
  "password": "securepassword",
  "role": "user"
}
```

**Ответ**:
- **Успех** (статус 200):
  - Тело: JSON-объект с данными ответа от Kafka (например, подтверждение регистрации).
- **Ошибки**:
  - 500: "Ошибка регистрации" (общая ошибка обработки).
  - 504: "Время ожидания ответа истекло" (таймаут ответа от Kafka).

**Особенности**:
- Запрос отправляется в Kafka в топик `user_requests` с действием `registration`.
- Время ожидания ответа от Kafka: 40 секунд.

### POST /confirm-registration ###

**Описание**: Подтверждает регистрацию пользователя с использованием email и кода подтверждения.

**Параметры запроса**:
- **Тело запроса** (JSON, `application/json`):
  - `email` (строка, обязательное): Email пользователя.
  - `confirmation_code` (строка, обязательное): Код подтверждения.

**Пример запроса**:
```json
{
  "email": "newuser@example.com",
  "confirmation_code": "123456"
}
```

**Ответ**:
- **Успех** (статус 200):
  - Тело: JSON-объект с данными ответа от Kafka (например, подтверждение успешной регистрации).
- **Ошибки**:
  - 500: "Ошибка регистрации" (общая ошибка обработки).
  - 504: "Время ожидания ответа истекло" (таймаут ответа от Kafka).

**Особенности**:
- Запрос отправляется в Kafka в топик `user_requests` с действием `confirm_email`.
- Время ожидания ответа от Kafka: 30 секунд.

### WebSocket /ws ###

**Описание**: Обрабатывает WebSocket-соединения для коммуникации в реальном времени. Проверяет токены и отправляет сообщения в Kafka для валидации.

**Параметры запроса**:
- **Сообщения** (JSON):
  - `topic` (строка, обязательное): Название топика Kafka для отправки сообщения.
  - `message` (объект, обязательное):
    - `access_token` (строка, обязательное): Токен доступа.
    - `body` (объект, опциональное): Данные сообщения.
    - `source` (строка, опциональное): Источник сообщения.
    - `action` (строка, опциональное): Действие для обработки.
  - `request_id` (строка, опциональное): Уникальный идентификатор запроса (генерируется автоматически, если отсутствует).

**Пример сообщения**:
```json
{
  "topic": "user_activity",
  "message": {
    "access_token": "abc123",
    "body": {},
    "source": "client",
    "action": "some_action"
  },
  "request_id": "uuid-1234"
}
```

**Ответ**:
- **Успех**:
  - Сообщение отправляется в Kafka в топик `user_activity.token_validation` с действием `validate_token`.
- **Ошибки**:
  - JSON: `{"request_id": "uuid", "status": "error", "message": "Неверный формат сообщения"}` (неверный формат сообщения).
  - JSON: `{"error": "Ошибка отправки в Kafka: <описание>"}` (ошибка отправки в Kafka).
  - Разрыв соединения: Логируется с кодом и причиной.

**Особенности**:
- В текущей реализации `user_id` захардкожен как `"123321"`.
- Поддерживает обработку разрывов соединения и общих ошибок.
- Сообщения валидируются перед отправкой в Kafka.