import os
from datetime import datetime

import httpx
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, UploadFile, File, Form, Depends, Cookie, Response
from pydantic import BaseModel
from starlette.middleware.cors import CORSMiddleware
from starlette.responses import JSONResponse

from app.gateway.middleware import WebSocketTokenMiddleware
from app.gateway.request_manager import RequestManager  # –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
from app.gateway.websocket_manager import WebSocketManager
from app.kafka.producer import produce_message
from app.kafka.config import PRIMARY_CONFIG
import uuid
import asyncio
import logging
from fastapi import Request
from fastapi import HTTPException
import httpx

from typing import Optional
import json
import socket

app = FastAPI()


app.add_middleware(
    CORSMiddleware,
    allow_origin_regex=".*",
    allow_credentials=True,  # üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∞–º–∏
    allow_methods=["*"],
    allow_headers=["*"],
)

# app.add_middleware(WebSocketTokenMiddleware)

logger = logging.getLogger("kafka")
logger.setLevel(logging.ERROR)

# –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RequestManager
request_manager = RequestManager()
ws_manager = WebSocketManager()


class LoginRequest(BaseModel):
    username: str
    password: str
    device_type: Optional[str] = 'unknown'
    device_name: Optional[str] = 'unknown'


@app.post("/login")
async def login(request: LoginRequest):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("–∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª")
    request_id = str(uuid.uuid4())
    kafka_message = {
        "request_id": request_id,
        "message": {
            "action": "auth_user",
            "username": request.username,
            "password": request.password,
            "device_type": request.device_type,
            "device_name": request.device_name
        }
    }

    try:
        event = asyncio.Event()
        await request_manager.add_request(request_id, event)
        produce_message(PRIMARY_CONFIG, "user_requests", kafka_message)

        await asyncio.wait_for(event.wait(), timeout=10.0)

        response_data = await request_manager.get_request(request_id)

        print(f"üì© response_data: {response_data}")

        if response_data:
            response_body = response_data.get("message", {}).get("body", {})

            if not response_body:
                print(f"‚ùå response_body –ø—É—Å—Ç–æ–π, response_data: {response_data}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Kafka")

            access_token = response_body.pop("access_token")
            refresh_token = response_body.pop("refresh_token")
            user_id = response_body.get("user_id")

            if access_token and refresh_token:
                response = JSONResponse(content=response_data)
                response.set_cookie(

                    key="access_token",
                    value=str(access_token),
                    httponly=True,
                    samesite='None',
                    secure=False
                )
                response.set_cookie(
                    key="refresh_token",
                    value=str(refresh_token),
                    httponly=True,
                    samesite='None',
                    secure=False
                )
                response.set_cookie(
                    key="user_id",
                    value=str(user_id),
                    httponly=True,
                    samesite='None',
                    secure=False
                )
                response.status_code = 200
                return response
            else:
                raise HTTPException(status_code=500, detail="–¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    except asyncio.TimeoutError:
        print(f"‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è request_id={request_id}")
        await request_manager.remove_request(request_id)
        raise HTTPException(status_code=504, detail="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@app.post("/refresh-token")
async def refresh_token(request: Request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏—à–µ–ª")
    request_id = str(uuid.uuid4())

    # –ü–æ–ª—É—á–∞–µ–º refresh_token –∏–∑ –∫—É–∫–æ–≤
    refresh_token = request.cookies.get("refresh_token")
    user_id = request.cookies.get("user_id")
    if not refresh_token:
        raise HTTPException(status_code=401, detail="Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    print("send refresh for refresh token: ", refresh_token)
    kafka_message = {
        "request_id": request_id,
        "message": {
            "action": "refresh_token",
            "refresh_token": refresh_token
        }
    }

    try:
        event = asyncio.Event()
        await request_manager.add_request(request_id, event)  # –î–æ–±–∞–≤–ª—è–µ–º request_id —Å asyncio.Event
        produce_message(PRIMARY_CONFIG, "auth_requests", kafka_message)

        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Kafka (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        await asyncio.wait_for(event.wait(), timeout=10.0)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_data = await request_manager.get_request(request_id)
        if response_data:
            print("response data get for refresh token: ", response_data)
            response_body = response_data.get("message", {}).get("body", {})
            access_token = response_body.pop("access_token", None)  # –£–¥–∞–ª—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º access_token
            refresh_token = response_body.pop("refresh_token", None)  # –£–¥–∞–ª—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º refresh_token

            if access_token and refresh_token:
                response = JSONResponse(content=response_data)
                response.set_cookie(
                    key="access_token",
                    value=str(access_token),
                    httponly=True,
                    samesite='None',
                    secure=False
                )
                response.set_cookie(
                    key="refresh_token",
                    value=str(refresh_token),
                    httponly=True,
                    samesite='None',
                    secure=False
                )

                response.set_cookie(
                    key="user_id",
                    value=str(user_id),
                    httponly=True,
                    samesite='None',
                    secure=False
                )


                response.status_code = 200
                return response
            else:
                raise HTTPException(status_code=500, detail="–¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    except asyncio.TimeoutError:
        await request_manager.remove_request(request_id)
        raise HTTPException(status_code=504, detail="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Kafka: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


# @app.get("/logout")
# async def logout(request: Request, response: Response):
#     """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª—è—é—â–∏–π –∫—É–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ –≤ Kafka."""
#
#     request_id = str(uuid.uuid4())
#
#     # –ü–æ–ª—É—á–∞–µ–º refresh_token –∏–∑ –∫—É–∫–æ–≤
#     refresh_token = request.cookies.get("refresh_token")
#
#     if not refresh_token:
#         logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –±–µ–∑ refresh_token")
#         return {"status": "success", "message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –Ω–æ refresh_token –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω"}
#
#     # –£–¥–∞–ª—è–µ–º –∫—É–∫–∏
#     response.delete_cookie("access_token")
#     response.delete_cookie("refresh_token")
#     response.delete_cookie("user_id")
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Kafka
#     disconnect_message = {
#         "request_id": request_id,
#         "message": {
#             "action": "revoke_refresh_tokensdf",
#             "refresh_token": refresh_token
#         }
#     }
#
#     try:
#         produce_message(PRIMARY_CONFIG, 'auth_requests', disconnect_message)
#         print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
#     except Exception as kafka_error:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑—Ä—ã–≤–µ –≤ Kafka: {kafka_error}")
#
#     return response


class RegisterRequest(BaseModel):
    first_name: str
    last_name: str
    middle_name: str
    email: str
    birth_date: str
    password: str
    check_password: str
    verification_code: str


@app.post("/register")
async def register(request: RegisterRequest):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω")
    request_id = str(uuid.uuid4())

    kafka_message = {
        "request_id": request_id,
        "message": {
            "action": "register",
            "body": request.model_dump()
        }
    }

    try:
        event = asyncio.Event()
        await request_manager.add_request(request_id, event)
        produce_message(PRIMARY_CONFIG, "user_requests", kafka_message)

        await asyncio.wait_for(event.wait(), timeout=10.0)

        response_data = await request_manager.get_request(request_id)
        if response_data:
            return JSONResponse(content=response_data)

        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except asyncio.TimeoutError:
        await request_manager.remove_request(request_id)
        raise HTTPException(status_code=504, detail="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Kafka: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    now = lambda: datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
    # headers = dict(websocket.headers)
    # cookies = headers.get("cookie", "")
    # cookies_dict = {cookie.split("=")[0]: cookie.split("=")[1] for cookie in cookies.split("; ") if "=" in cookie}
    # access_token = cookies_dict.get("access_token")
    # user_id = cookies_dict.get("user_id")
    # client_host = websocket.client.host
    # client_port = websocket.client.port
    #
    # if not access_token or not user_id:
    #     print(f"{now()} - –û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token –∏–ª–∏ user_id.")
    #     await websocket.close(code=1008)
    #     return

    user_id = "123321"

    print(f"{now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. access_token:")
    await ws_manager.connect(websocket, user_id)
    try:
        while True:
            data = await websocket.receive_json()
            print(f"{now()} - –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")

            topic_name = data.get("topic")
            message = data.get("message")

            if not message or not isinstance(message, dict):
                print(f"{now()} - –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
                await websocket.send_text(json.dumps(
                    {"request_id": str(uuid.uuid4()), "status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"}))
                continue

            request_id = data.get("request_id", str(uuid.uuid4()))
            kafka_message = {
                "request_id": request_id,
                "message": message
            }

            try:
                await request_manager.add_request(request_id, websocket)
                print(f"{now()} - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω request_id {request_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                produce_message(PRIMARY_CONFIG, topic_name, kafka_message)
            except Exception as kafka_error:
                logger.error(f"{now()} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {kafka_error}")
                await websocket.send_text(json.dumps({"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {str(kafka_error)}"}))

    except WebSocketDisconnect as e:
        code = getattr(e, "code", "–Ω–µ—Ç –∫–æ–¥–∞")
        reason = getattr(e, "reason", "–Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã")
        print(f"{now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket. –ö–æ–¥: {code}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await ws_manager.disconnect(user_id)

    except Exception as e:
        logger.error(f"{now()} - –û–±—â–∞—è –æ—à–∏–±–∫–∞ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            await websocket.send_text(json.dumps({"error": str(e)}))
        except Exception as send_error:
            print(f"{now()} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")
        logger.error(f"{now()} - –û–±—â–∞—è –æ—à–∏–±–∫–∞ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
