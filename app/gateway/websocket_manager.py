import json

from fastapi import WebSocket
from typing import Dict
from starlette.websockets import WebSocketState, WebSocketDisconnect
from datetime import datetime


class WebSocketManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}  # –°–≤—è–∑—ã–≤–∞–µ–º user_id —Å WebSocket

    async def connect(self, websocket: WebSocket, user_id: str):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await websocket.accept()
        self.active_connections[user_id] = websocket
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω WebSocket –¥–ª—è user_id: {user_id}")

    async def disconnect(self, user_id: str):
        websocket = self.active_connections.pop(user_id, None)
        if websocket:
            try:
                await websocket.close()
                code = getattr(websocket, "close_code", "–Ω–µ—Ç –∫–æ–¥–∞")
                print(
                    f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')} - ‚ùå –û—Ç–∫–ª—é—á—ë–Ω WebSocket –¥–ª—è user_id: {user_id}. –ö–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è: {code}")
            except Exception as e:
                print(
                    f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')} - ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket –¥–ª—è {user_id}: {e}")

    async def send_message(self, user_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ `user_id`"""
        if user_id in self.active_connections:
            websocket = self.active_connections[user_id]
            try:
                await websocket.send_json(message)
                print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await self.disconnect(user_id)  # ‚úÖ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–µ—Ç–∏. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    async def broadcast(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º"""
        print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º: {message}")
        print(f"üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {list(self.active_connections.keys())}")  # üëà –ù–æ–≤—ã–π –ª–æ–≥

        if not self.active_connections:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π! –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return

        for user_id, websocket in self.active_connections.items():
            try:
                await websocket.send_text(message)
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id {user_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket user_id {user_id}: {e}")

    async def handle_pong(self, websocket: WebSocket):
        while True:
            try:
                data = await websocket.receive_json()
                if not data:
                    print("üîÑ –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket")
                    break

                if isinstance(data, dict) and data.get('type') == 'ping':
                    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω pong –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç WebSocket")
                break
            except WebSocketDisconnect:
                print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ")
                break
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket: —Ñ—É–Ω–∫—Ü–∏—è handle_pong {e}")
                break
